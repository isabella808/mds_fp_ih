from mds_fp_ih import mds_fp_ih

# -*- coding: utf-8 -*-
"""Final Project Test 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BTkkxZEBWFvlqxpTrxAlC8F1ASwuhmUd
"""
import requests
import pandas as pd
import os
from pathlib import Path
import json
from json import dumps, loads
from pandas import json_normalize
import numpy as np
import datetime
from datetime import datetime
import doctest
import re
import warnings


from dotenv.main import load_dotenv
load_dotenv()
key = os.getenv('API_KEY')


def get_traffic_inc_info(key, tpe=None, road=None):
    
    """
This function uses the Traffic Incidents API. 

It allows users to search and find information on traffic incidents
currently happening on the roads, like road blocks, heavy traffic, 
accidents etc. It is updated every 2 minutes. 

If function is ran without specified parameters, it will return data on
ALL current traffic incidents. 


Parameters:
-----------
    key: Enter your saved API key (please keep the key private)
    tpe: (optional) Enter incident type you are searching for.
        Allowed inputs: 
            Accident
            Roadwork
            Vehicle Breakdown
            Weather
            Obstacle
            Road Block
            Heavy Traffic
            Misc.
            Diversion
            Unattended Vehicle
    road: (optional) Enter names of road, expressways, or areas in 
    which you are searching for accidents for. eg: Jurong, TPE, Tuas. 
            
Returns:
--------
    Prints the status code of the call and if successful returns 
    your data on traffic incidents in a dataframe format. 

Example: #fix
-------
>>>> 

Status code: 200


""" 


    def get_ap():
        url = 'http://datamall2.mytransport.sg/ltaodataservice/TrafficIncidents'
        headers = { 'AccountKey' : key, 'accept' : 'application/json'}
        r = requests.get(url, headers = headers)
        data = r.json()
        if r.status_code == 200:
            print ('Successful API call for traffic incident information.')
        return data
    

    df = json_normalize(get_ap()['value'])
    df2 = df.copy()

    def road_search():
        if road == None:
            return df2
        else:
            ids = df2['Message'].str.contains(road, flags = re.IGNORECASE, regex = True, na = False)
            return df2[ids]
        
    def tpe_search():
        if tpe == None:
            return road_search()
        else:
            ids2 = df2['Type'].str.contains(tpe, flags = re.IGNORECASE, regex = True, na = False)
            return road_search()[ids2]
    
    #hide UserWarning
    warnings.simplefilter("ignore")
    warnings.warn("user", UserWarning)
    
    #filter for empty dataset
    if tpe_search().empty == True:
        print('There are no results for your search. Try checking or changing your search contents.')
    else: 
        return tpe_search()

def get_ap():
        url = 'http://datamall2.mytransport.sg/ltaodataservice/TrafficIncidents'
        headers = { 'AccountKey' : key, 'accept' : 'application/json'}
        r = requests.get(url, headers = headers)
        data = r.json()
        global rsc
        rsc = r.status_code
        if r.status_code == 200:
            print ('Successful API call for traffic incident information.')
        return data

"""Test the get_ap() function. """

get_traffic_inc_info(key)

def test_get_ap():
    expected = 200
    get_ap()
    actual = rsc
    assert actual == expected
    print('Passed API call test.')

test_get_ap()

"""Test that get_traffic_inc_info() returns output as desired."""

def get_traffic_inc_info(key, tpe=None, road=None):
    
    """
This function uses the Traffic Incidents API. 

It allows users to search and find information on traffic incidents
currently happening on the roads, like road blocks, heavy traffic, 
accidents etc. It is updated every 2 minutes. 

If function is ran without specified parameters, it will return data on
ALL current traffic incidents. 


Parameters:
-----------
    key: Enter your saved API key (please keep the key private)
    tpe: (optional) Enter incident type you are searching for.
        Allowed inputs: 
            Accident
            Roadwork
            Vehicle Breakdown
            Weather
            Obstacle
            Road Block
            Heavy Traffic
            Misc.
            Diversion
            Unattended Vehicle
    road: (optional) Enter names of road, expressways, or areas in 
    which you are searching for accidents for. eg: Jurong, TPE, Tuas. 
            
Returns:
--------
    Prints the status code of the call and if successful returns 
    your data on traffic incidents in a dataframe format. 

Example: #fix
-------
>>>> 

Status code: 200


"""    
    load_dotenv()
    key = os.getenv('API_KEY')    

    def get_ap():
        url = 'http://datamall2.mytransport.sg/ltaodataservice/TrafficIncidents'
        headers = { 'AccountKey' : key, 'accept' : 'application/json'}
        r = requests.get(url, headers = headers)
        data = r.json()
        if r.status_code == 200:
            print ('Successful API call for traffic incident information.')
        return data
    

    df = json_normalize(get_ap()['value'])
    df2 = df.copy()

    def road_search():
        if road == None:
            return df2
        else:
            ids = df2['Message'].str.contains(road, flags = re.IGNORECASE, regex = True, na = False)
            return df2[ids]
        
    def tpe_search():
        if tpe == None:
            return road_search()
        else:
            ids2 = df2['Type'].str.contains(tpe, flags = re.IGNORECASE, regex = True, na = False)
            return road_search()[ids2]
    
    #hide UserWarning
    warnings.simplefilter("ignore")
    warnings.warn("user", UserWarning)
    
    #filter for empty dataset
    if tpe_search().empty == True:
        print('There are no results for your search. Try checking or changing your search contents.')
    else: 
        return tpe_search()

def test_get_traffic_inc_info():
    example = get_traffic_inc_info(key)
    df = example
    df1 = pd.DataFrame(columns=['Type', 'Latitude', 'Longtitude','Message'])
    if df is None:
        expected = None
        actual = get_traffic_inc_info(key)
        assert actual == expected
        print('Output of notification of no information available is as expected, test is passed.')
 
    else:
        df_cols = len(df.columns)
        df1_cols = len(df1.columns)
        expected = df_cols
        actual = df1_cols
        assert actual == expected
        print('Output of dataframe is as expected, test is passed.')

test_get_traffic_inc_info()


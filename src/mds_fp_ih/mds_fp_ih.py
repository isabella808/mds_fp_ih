# -*- coding: utf-8 -*-
"""Final Project V14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F_42tPAxuS7yGeNg6oD-ykeIFrsp2Fm5
"""

import requests
import pandas as pd
import os
from pathlib import Path
import json
from json import dumps, loads
from pandas import json_normalize
import numpy as np
import datetime
from datetime import datetime
import doctest
import re
import warnings
from dotenv import load_dotenv

load_dotenv()
key = os.getenv('API_KEY')

def get_traffic_inc_info(key, tpe=None, road=None):
    
    """
This function uses the Traffic Incidents API. 

It allows users to search and find information on traffic incidents
currently happening on the roads, like road blocks, heavy traffic, 
accidents etc. It is updated every 2 minutes. 

If function is ran without specified parameters, it will return data on
ALL current traffic incidents. 


Parameters:
-----------
    key: Enter your saved API key (please keep the key private)
    tpe: (optional) Enter incident type you are searching for.
        Allowed inputs: 
            Accident
            Roadwork
            Vehicle Breakdown
            Weather
            Obstacle
            Road Block
            Heavy Traffic
            Misc.
            Diversion
            Unattended Vehicle
    road: (optional) Enter names of road, expressways, or areas in 
    which you are searching for accidents for. eg: Jurong, TPE, Tuas. 
            
Returns:
--------
    Prints the status code of the call and if successful returns 
    your data on traffic incidents in a dataframe format. 

Example: 
-------
>>>> get_traffic_inc_info(key, road='CTE')

Note: Since this is a dynamic API, output examples may vary based on live
traffic conditions. 

Successful API call for traffic incident information.

Type	Latitude	Longitude	Message
0	Vehicle breakdown	1.319587	103.853749	(17/12)3:52 Vehicle breakdown on CTE (towards ...
16	Roadwork	1.388245	103.858096	(16/12)23:25 Roadworks on CTE (towards SLE) at...
17	Roadwork	1.289865	103.842774	(16/12)23:18 Roadworks on Merchant Road (towar...
26	Roadwork	1.287646	103.843370	(16/12)22:41 Roadworks on Havelock Road (towar...
50	Roadwork	1.309495	103.846241	(16/12)21:01 Roadworks on Bukit Timah Road (to...



"""    

    def get_ap():
        url = 'http://datamall2.mytransport.sg/ltaodataservice/TrafficIncidents'
        headers = { 'AccountKey' : key, 'accept' : 'application/json'}
        r = requests.get(url, headers = headers)
        data = r.json()
        if r.status_code == 200:
            print ('Successful API call for traffic incident information.')
        return data
    

    df = json_normalize(get_ap()['value'])
    df2 = df.copy()

    def road_search():
        if road == None:
            return df2
        else:
            ids = df2['Message'].str.contains(road, flags = re.IGNORECASE, regex = True, na = False)
            return df2[ids]
        
    def tpe_search():
        if tpe == None:
            return road_search()
        else:
            ids2 = df2['Type'].str.contains(tpe, flags = re.IGNORECASE, regex = True, na = False)
            return road_search()[ids2]
    
    #hide UserWarning
    warnings.simplefilter("ignore")
    warnings.warn("user", UserWarning)
    
    #filter for empty dataset
    if tpe_search().empty == True:
        print('There are no results for your search. Try checking or changing your search contents.')
    else: 
        return tpe_search()


def get_bus_info(key, busstopcode):
    """
This function uses the Bus Arrival API. 

It allows users to check the following information: estimated bus arrival times, 
passenger density, and accessibility features, for the next 3 buses 
at their desired bus stop in live time.


Parameters:
-----------
    key: Enter your saved API key (please keep the key private)
    busstopcode: Enter code for desired bus stop

Returns:
--------
    Prints the status code of the call and if successful returns 
    your data on buses in a dataframe format. 

Example:
-------
>>>> get_bus_info(key, 14281)

Note: Since this is a dynamic API, output examples may vary based on live
traffic conditions. 

Successful API call for bus arrival times.

Service Number	Bus Estimated Arrival	Bus Density	Bus Accessibility	Bus 2 Estimated Arrival	Bus 2 Density	Bus 2 Accessibility	Bus 3 Estimated Arrival	Bus 3 Density	Bus 3 Accessibility
0	124	09:24:00	Seats Available	Wheelchair Accessible	09:35:58	Seats Available	Wheelchair Accessible	09:51:18	Seats Available	Wheelchair Accessible
1	131	09:20:17	Seats Available	Wheelchair Accessible	09:34:05	Seats Available	Wheelchair Accessible	09:43:43	Seats Available	Wheelchair Accessible
2	195	09:21:25	Standing Available	Wheelchair Accessible	09:33:10	Seats Available	Wheelchair Accessible	09:48:39	Seats Available	Wheelchair Accessible



"""
    
    def get_ap():
        url3 = 'http://datamall2.mytransport.sg/ltaodataservice/BusArrivalv2?BusStopCode='
        url3 += str(busstopcode)
        headers = { 'AccountKey' : key, 'accept' : 'application/json'}
        r = requests.get(url3, headers = headers)
        data3 = r.json()
        if r.status_code == 200:
            print ('Successful API call for bus arrival times.')
        return data3
    
    data3_df = json_normalize(get_ap()['Services'])
    
    #if no buses serving stop, show message
    if data3_df.empty == True:
        print('There are no buses serving this stop now.')

    else:
        #filter dataset for important values
        df3 = data3_df[['ServiceNo', 'NextBus.EstimatedArrival', 'NextBus.Load','NextBus2.EstimatedArrival','NextBus2.Load', 'NextBus3.EstimatedArrival','NextBus3.Load', 'NextBus.Feature','NextBus2.Feature','NextBus3.Feature']]
        
        df4 = df3.copy()
        
        set = ['','2', '3']
        
        #insert interpretation for bus passenger load
        for i in set:
            df4.loc[df4['NextBus'+str(i)+'.Load'] == 'SEA', 'NextBus'+str(i)+'.Load'] = 'Seats Available'
            df4.loc[df4['NextBus'+str(i)+'.Load'] == 'SDA', 'NextBus'+str(i)+'.Load'] = 'Standing Available'
            df4.loc[df4['NextBus'+str(i)+'.Load'] == 'LSD', 'NextBus'+str(i)+'.Load'] = 'Limited Standing'


        #insert interpretation for wheelchair accesibility indicator
        for i in set:
            df4.loc[df4['NextBus'+str(i)+'.Feature'] =='WAB', 'NextBus'+str(i)+'.Feature'] = 'Wheelchair Accessible'

        #extracting ONLY time from the information on bus arrival and setting to datetime
        #also adjusting such that missing values are not processed
        for i in set:
            if type(df4['NextBus'+str(i)+'.EstimatedArrival']) != None:
                df4['NextBus'+str(i)+'.EstimatedArrival'] = pd.to_datetime(df4['NextBus'+str(i)+'.EstimatedArrival']).dt.time

        #clean up information presentation, specifically names of columns
        for i in set:
            df4 = df4.rename(columns={'NextBus'+str(i)+'.EstimatedArrival': 'Bus '+str(i)+' Estimated Arrival', 'NextBus'+str(i)+'.Load': 'Bus '+str(i)+' Density',
                                      'NextBus'+str(i)+'.Feature':'Bus '+str(i)+' Accessibility'})
        df4 = df4.rename(columns={'ServiceNo':'Service Number'})

        
        #rearrange columns in order of bus arrivals
        df5 = df4[['Service Number', 'Bus  Estimated Arrival', 'Bus  Density', 'Bus  Accessibility','Bus 2 Estimated Arrival', 'Bus 2 Density','Bus 2 Accessibility', 'Bus 3 Estimated Arrival', 'Bus 3 Density', 'Bus 3 Accessibility']]

        
        return df5


def get_train_service_alerts(key): 
    
    """
This function uses the Train Service Alert API. 

It returns detailed information on train service unavailability during 
scheduled operating hours, such as affected line and stations etc.


Parameters:
-----------
    key: Enter your saved API key (please keep the key private)

Returns:
--------
    Prints the status code of the call and if successful, returns 
    data on whether there are any disruptions, train service alerts, 
    information on what lines are affected, direction of service unavailability,
    stations affected, information on shuffle buses available, and 
    any other important messages. 

Example: 
-------
>>>> get_train_service_alerts(key)

Note: Since this is a dynamic API, output examples may vary based on live
train service conditions. 

Successful API call for train service alerts.
Normal Train Service. There are no disruptions at the moment.


"""
    
    def train_disruption():
        
        #contingency plans for different scenarios with different number of messages
        #for loop ensures ALL messages are printed

        if len(get_ap()['value']['Message'].keys()) == 1:
            for i in range(0,1):
                print(list(get_ap()['value']['Message'].values()[i]))
            
        if len(get_ap()['value']['Message'].keys()) == 2:
            for i in range(0,2):
                print(list(get_ap()['value']['Message'].values()[i]))
        
        if len(get_ap()['value']['Message'].keys()) == 3:
            for i in range(0,3):
                print(list(get_ap()['value']['Message'].values()[i]))
        
        if len(get_ap()['value']['Message'].keys()) == 4:
            for i in range(0,4):
                print(list(get_ap()['value']['Message'].values()[i]))
        
        df1 = json_normalize(get_ap()['value']['AffectedSegments'])        
        return df1
    
    
    def get_ap():
        url3 = 'http://datamall2.mytransport.sg/ltaodataservice/TrainServiceAlerts'
        headers = { 'AccountKey' : key, 'accept' : 'application/json'}
        r = requests.get(url3, headers = headers)
        global datatsa
        datatsa = r.json()
        
        if r.status_code == 200:
            print ('Successful API call for train service alerts.')
            return datatsa
        else:
            print('Unsuccessful API call for train service alerts.') 
    
    get_ap() 
    
    if datatsa['value']['Status'] == 1:
        print('Normal Train Service. There are no disruptions at the moment.')
        
    else:
        traindisruption()







